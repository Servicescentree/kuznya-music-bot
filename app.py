import os
import time
import html
import logging
from threading import Thread
from dataclasses import dataclass
from typing import Dict, Any

import telebot
from telebot import types
from flask import Flask, jsonify

import requests  # for self-ping
import redis     # for Redis

# -------- CONFIG --------
@dataclass
class BotConfig:
    TOKEN: str = os.getenv('BOT_TOKEN')
    ADMIN_ID: int = int(os.getenv('ADMIN_ID') or 0)
    CHANNEL_URL: str = 'https://t.me/kuznya_music'
    EXAMPLES_URL: str = 'https://t.me/kuznya_music/41'
    WEBHOOK_PORT: int = int(os.getenv('PORT', 8080))
    MAX_MESSAGE_LENGTH: int = 4000
    RATE_LIMIT_MESSAGES: int = 5  # messages per minute
    REDIS_URL: str = os.getenv('REDIS_URL')

config = BotConfig()

if not config.TOKEN or not config.ADMIN_ID:
    raise ValueError("‚ùå Set BOT_TOKEN and ADMIN_ID as environment variables! Bot will not run.")
if not config.REDIS_URL:
    raise ValueError("‚ùå Set REDIS_URL as environment variable! Bot will not run.")

# -------- REDIS INIT --------
try:
    r = redis.Redis.from_url(config.REDIS_URL, decode_responses=True)
    r.ping()
    print("‚úÖ Redis connection OK!")
except Exception as e:
    print(f"‚ùå Redis connection ERROR: {e}")
    raise

# -------- TEXTS --------
class Messages:
    WELCOME = """–ü—Ä–∏–≤—ñ—Ç, {}! üëã
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º—É–∑–∏—á–Ω–æ—ó —Å—Ç—É–¥—ñ—ó Kuznya Music!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"""
    RECORDING_PROMPT = """üé§ *–ó–∞–ø–∏—Å —Ç—Ä–µ–∫—É*

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è:
‚Ä¢ –ó–∞–ø–∏—Å, –ó–≤–µ–¥–µ–Ω–Ω—è
‚Ä¢ –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è 
‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å–∏ (–ø—Ä–∏–∫–ª–∞–¥–∏)
‚Ä¢ –¢–µ—Ä–º—ñ–Ω–∏ (–∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å)

_–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É_"""
    EXAMPLES_INFO = """üéµ *–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:*

–ü–æ—Å–ª—É—Ö–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç:
{}

–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â—ñ –∑—Ä–∞–∑–∫–∏ –Ω–∞—à–æ—ó —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ!"""
    CHANNEL_INFO = """üì¢ *–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*

{}

–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ù–æ–≤—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–∫—É–ª—ñ—Å—Å—è —Å—Ç—É–¥—ñ—ó
‚Ä¢ –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏"""
    CONTACTS_INFO = """üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Å—Ç—É–¥—ñ—ó:*

Telegram: @kuznya_music
–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫' –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    MESSAGE_SENT = """‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!
–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...

_–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥_"""
    DIALOG_ENDED = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    ADMIN_REPLY = "üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{}"
    USE_MENU_BUTTONS = "ü§î –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
    ERROR_SEND_FAILED = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    ERROR_MESSAGE_TOO_LONG = f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
    ERROR_RATE_LIMITED = "‚ùå –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É."
    ERROR_INVALID_INPUT = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    BROADCAST_PENDING = "‚ö†Ô∏è –ó–∞—Ä–∞–∑ –æ—á—ñ–∫—É—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ—ó."
    PRIVACY_NOTICE = "‚ö†Ô∏è –ù–µ –ø–æ—à–∏—Ä—é–π—Ç–µ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É!"

# -------- STATES --------
class UserStates:
    IDLE = 'idle'
    WAITING_FOR_MESSAGE = 'waiting_for_message'
    ADMIN_REPLYING = 'admin_replying'
    BROADCAST_PENDING = 'broadcast_pending'

# -------- LOGGING --------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(config.TOKEN)
try:
    bot_info = bot.get_me()
    logger.info(f"Bot token is valid! Bot name: {bot_info.first_name} (@{bot_info.username})")
except Exception as token_error:
    logger.error(f"Invalid bot token: {token_error}")
    exit(1)

# -------- REDIS UTILS --------
def is_admin(user_id: int) -> bool:
    return int(user_id) == int(config.ADMIN_ID)

def set_user_state(user_id: int, state: str):
    r.set(f"user:{user_id}:state", state)

def get_user_state(user_id: int) -> str:
    return r.get(f"user:{user_id}:state") or UserStates.IDLE

def clear_user_state(user_id: int):
    r.delete(f"user:{user_id}:state")

def all_user_ids():
    # WARNING: for large bots use scan_iter
    return [int(key.split(':')[1]) for key in r.keys('user:*:state')]

def set_admin_reply(user_id: int):
    r.set(f"admin:reply_to", user_id)

def get_admin_reply():
    val = r.get("admin:reply_to")
    return int(val) if val else None

def clear_admin_reply():
    r.delete("admin:reply_to")

def set_broadcast_pending():
    r.set("admin:broadcast_pending", "1")

def clear_broadcast_pending():
    r.delete("admin:broadcast_pending")

def is_broadcast_pending():
    return r.get("admin:broadcast_pending") == "1"

def incr_rate_limit(user_id: int) -> int:
    key = f"user:{user_id}:rate"
    val = r.incr(key)
    if val == 1:
        r.expire(key, 60)
    return int(val)

def get_rate_limit(user_id: int) -> int:
    return int(r.get(f"user:{user_id}:rate") or 0)

def reset_rate_limit(user_id: int):
    r.delete(f"user:{user_id}:rate")

# -------- UTILS --------
def get_user_info(user) -> Dict[str, Any]:
    return {
        'id': user.id,
        'username': user.username or "–ë–µ–∑ username",
        'first_name': user.first_name or "–ù–µ–≤—ñ–¥–æ–º–æ",
        'last_name': user.last_name or "",
        'full_name': f"{user.first_name or ''} {user.last_name or ''}".strip()
    }

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫"),
        types.KeyboardButton("üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
    )
    markup.add(
        types.KeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"),
        types.KeyboardButton("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    )
    return markup

def get_chat_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    return markup

def get_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏"),
        types.KeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    )
    markup.add(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
    )
    return markup

def escape_markdown(text: str) -> str:
    # –ï–∫—Ä–∞–Ω—ñ—Ä—É—î–º–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ Markdown –¥–ª—è Telegram
    chars = r'\_*[]()~`>#+-=|{}.!'
    for c in chars:
        text = text.replace(c, f'\\{c}')
    return text

def validate_message(message) -> tuple[bool, str]:
    if not message or not message.text:
        return False, Messages.ERROR_INVALID_INPUT
    if len(message.text) > config.MAX_MESSAGE_LENGTH:
        return False, Messages.ERROR_MESSAGE_TOO_LONG
    if incr_rate_limit(message.from_user.id) > config.RATE_LIMIT_MESSAGES:
        return False, Messages.ERROR_RATE_LIMITED
    return True, ""

def sanitize_input(text: str) -> str:
    return html.escape(text.strip())

# -------- HANDLERS --------

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_info = get_user_info(message.from_user)
    if is_admin(message.from_user.id):
        markup = get_admin_keyboard()
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüíº –í–∏ —É –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=markup
        )
    else:
        markup = get_main_keyboard()
        set_user_state(message.from_user.id, UserStates.IDLE)
        bot.send_message(
            message.chat.id,
            Messages.WELCOME.format(user_info['first_name']),
            reply_markup=markup
        )

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
def handle_admin_broadcast(message):
    if is_broadcast_pending():
        bot.send_message(message.chat.id, Messages.BROADCAST_PENDING)
        return
    set_broadcast_pending()
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏. –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    def broadcast_handler(msg):
        txt = escape_markdown(msg.text)
        count = 0
        for uid in all_user_ids():
            if uid != config.ADMIN_ID:
                try:
                    bot.send_message(uid, f"üì¢ [–†–æ–∑—Å–∏–ª–∫–∞]\n\n{txt}", parse_mode="MarkdownV2")
                    count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ broadcast –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {uid}: {e}")
        clear_broadcast_pending()
        bot.send_message(config.ADMIN_ID, f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

    bot.register_next_step_handler(message, broadcast_handler)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_show_stats(message):
    total_users = len(all_user_ids())
    active_users = sum(1 for uid in all_user_ids() if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE)
    stats_text = f"""üìä *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
üí¨ –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤: {active_users}
üìÖ –î–∞—Ç–∞: {time.strftime('%d.%m.%Y %H:%M')}
üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è: Redis
‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è: –∞–∫—Ç–∏–≤–Ω–µ
‚Ä¢ –†–µ–π—Ç-–ª—ñ–º—ñ—Ç–∏–Ω–≥: {config.RATE_LIMIT_MESSAGES} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å/—Ö–≤–∏–ª–∏–Ω—É"""
    bot.send_message(
        message.chat.id,
        stats_text,
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏")
def handle_admin_active_dialogs(message):
    users = [uid for uid in all_user_ids() if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE]
    txt = "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
def handle_admin_users(message):
    users = [uid for uid in all_user_ids() if uid != config.ADMIN_ID]
    txt = "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫")
def handle_start_recording(message):
    user_id = message.from_user.id
    set_user_state(user_id, UserStates.WAITING_FOR_MESSAGE)
    markup = get_chat_keyboard()
    bot.send_message(
        message.chat.id,
        Messages.RECORDING_PROMPT,
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
def handle_show_examples(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "–î–æ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ üéß",
        url=config.EXAMPLES_URL
    ))
    bot.send_message(
        message.chat.id,
        "üéµ –ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:\n\n–ü—Ä–∏–∫–ª–∞–¥–∏: –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è üéπ | –ó–≤–µ–¥–µ–Ω–Ω—è üéß | –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥—É üîä",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_show_channel(message):
    bot.send_message(
        message.chat.id,
        Messages.CHANNEL_INFO.format(config.CHANNEL_URL),
        disable_web_page_preview=False
    )

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def handle_show_contacts(message):
    bot.send_message(
        message.chat.id,
        Messages.CONTACTS_INFO
    )

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")
def handle_end_dialog(message):
    user_id = message.from_user.id
    set_user_state(user_id, UserStates.IDLE)
    markup = get_main_keyboard()
    bot.send_message(
        message.chat.id,
        Messages.DIALOG_ENDED,
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserStates.WAITING_FOR_MESSAGE)
def handle_user_message(message):
    is_valid, error_msg = validate_message(message)
    if not is_valid:
        bot.send_message(message.chat.id, error_msg)
        return
    user_info = get_user_info(message.from_user)
    sanitized_text = escape_markdown(message.text)
    admin_text = f"""üí¨ *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞*

üë§ *–ö–ª—ñ—î–Ω—Ç:* {escape_markdown(user_info['full_name'])} (@{escape_markdown(user_info['username'])})
üÜî *ID:* `{user_info['id']}`
‚è∞ *–ß–∞—Å:* {time.strftime('%H:%M %d.%m.%Y')}

üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{sanitized_text}

{Messages.PRIVACY_NOTICE}
"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
        callback_data=f"reply_{user_info['id']}"
    ))
    bot.send_message(
        config.ADMIN_ID,
        admin_text,
        parse_mode='MarkdownV2',
        reply_markup=markup
    )
    bot.forward_message(config.ADMIN_ID, message.chat.id, message.message_id)
    bot.send_message(message.chat.id, Messages.MESSAGE_SENT)

# ---- –ê–î–ú–Ü–ù –í–Ü–î–ü–û–í–Ü–î–Ü ----

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_admin_reply_callback(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    user_id = int(call.data.split('_')[1])
    set_admin_reply(user_id)
    set_user_state(config.ADMIN_ID, f"{UserStates.ADMIN_REPLYING}_{user_id}")
    bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º")
    bot.send_message(
        config.ADMIN_ID,
        f"‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É (ID: {user_id}):\n\n"
        "_–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É_"
    )

@bot.message_handler(func=lambda message: is_admin(message.from_user.id))
def handle_admin_reply_or_panel(message):
    admin_id = message.from_user.id

    # 1. –Ø–∫—â–æ reply –Ω–∞ forward-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞–¥–º—ñ–Ω –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É Telegram)
    if message.reply_to_message and message.reply_to_message.forward_from:
        user_id = message.reply_to_message.forward_from.id
        sanitized_reply = escape_markdown(message.text)
        bot.send_message(
            user_id,
            Messages.ADMIN_REPLY.format(sanitized_reply),
            parse_mode='MarkdownV2'
        )
        bot.send_message(
            admin_id,
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É (ID: {user_id})",
            reply_to_message_id=message.message_id
        )
        clear_admin_reply()
        set_user_state(admin_id, UserStates.IDLE)
        return

    # 2. –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É callback-—Ä–µ–∂–∏–º—ñ (–Ω–∞—Ç–∏—Å–Ω—É–≤ "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏")
    state = get_user_state(admin_id)
    if state and state.startswith(UserStates.ADMIN_REPLYING):
        target_user_id = get_admin_reply()
        if not target_user_id:
            bot.send_message(admin_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            return
        sanitized_reply = escape_markdown(message.text)
        bot.send_message(
            target_user_id,
            Messages.ADMIN_REPLY.format(sanitized_reply),
            parse_mode='MarkdownV2'
        )
        bot.send_message(
            admin_id,
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É (ID: {target_user_id})",
            reply_to_message_id=message.message_id
        )
        set_user_state(admin_id, UserStates.IDLE)
        clear_admin_reply()
        return

    # 3. –Ø–∫—â–æ —ñ–Ω—à–µ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –º–µ–Ω—é
    markup = get_admin_keyboard()
    bot.send_message(
        admin_id,
        Messages.USE_MENU_BUTTONS,
        reply_markup=markup
    )

# --- catch-all –æ—Å—Ç–∞–Ω–Ω—ñ–º! ---
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if is_admin(message.from_user.id):
        markup = get_admin_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )
    else:
        markup = get_main_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )

# -------- FLASK & SELF-PING --------
app = Flask(__name__)
bot_start_time = time.time()

@app.route('/')
def health_check():
    uptime_seconds = int(time.time() - bot_start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    return f"""
    <h1>üéµ Kuznya Music Studio Bot</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</p>
    <p><strong>Uptime:</strong> {uptime_hours}–≥–æ–¥ {uptime_minutes}—Ö–≤</p>
    <p><strong>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(bot_start_time))}</p>
    <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</strong> {len(all_user_ids())}</p>
    """

@app.route('/health')
def health():
    try:
        bot_info = bot.get_me()
        return jsonify({
            "status": "healthy",
            "timestamp": time.time(),
            "uptime_seconds": int(time.time() - bot_start_time),
            "bot_username": bot_info.username,
            "total_users": len(all_user_ids()),
            "version": "3.0-redis"
        }), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/status')
def status():
    try:
        active_users = sum(1 for uid in all_user_ids() if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE)
        return jsonify({
            "bot_status": "running",
            "uptime_seconds": int(time.time() - bot_start_time),
            "total_users": len(all_user_ids()),
            "active_chats": active_users,
            "admin_id": config.ADMIN_ID,
            "timestamp": time.time()
        })
    except Exception as e:
        logger.error(f"Status check failed: {e}")
        return jsonify({
            "bot_status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/keepalive')
def keep_alive():
    return jsonify({
        "message": "Bot is alive!",
        "timestamp": time.time(),
        "uptime": int(time.time() - bot_start_time)
    })

def run_flask():
    app.run(
        host='0.0.0.0', 
        port=config.WEBHOOK_PORT, 
        debug=False,
        threaded=True
    )

def self_ping():
    port = config.WEBHOOK_PORT
    url = f"http://localhost:{port}/keepalive"
    while True:
        try:
            r_ping = requests.get(url, timeout=10)
            print(f"[SELF-PING] Pinged {url} ({r_ping.status_code})")
        except Exception as e:
            print(f"[SELF-PING] Error pinging {url}: {e}")
        time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω

if __name__ == "__main__":
    try:
        logger.info("Starting Kuznya Music Studio Bot...")
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()
        selfping_thread = Thread(target=self_ping, daemon=True)
        selfping_thread.start()
        logger.info("üéµ Music Studio Bot started successfully!")
        logger.info(f"Admin ID: {config.ADMIN_ID}")
        logger.info("Bot is polling for messages...")
        while True:
            try:
                bot.polling(none_stop=True, interval=1, timeout=30)
            except telebot.apihelper.ApiTelegramException as api_error:
                if "409" in str(api_error) or "Conflict" in str(api_error):
                    logger.warning("Conflict detected - another bot instance running. Retrying in 10 seconds...")
                    time.sleep(10)
                    try:
                        bot.stop_polling()
                        bot.remove_webhook()
                    except:
                        pass
                    time.sleep(5)
                    continue
                else:
                    raise api_error
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        try:
            bot.stop_polling()
        except:
            pass
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        try:
            bot.stop_polling()
        except:
            pass
        exit(1)
