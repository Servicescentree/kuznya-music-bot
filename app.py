import os
import time
import html
import logging
from threading import Thread
from dataclasses import dataclass
from typing import Dict, Any

import telebot
from telebot import types
from flask import Flask, jsonify, request

import requests  # for self-ping
import redis     # upstash redis

# -------- REDIS SETUP --------
REDIS_URL = os.getenv("UPSTASH_REDIS_REST_URL")
if not REDIS_URL or not REDIS_URL.startswith("redis"):
    raise ValueError(f"UPSTASH_REDIS_REST_URL is not set or invalid! Got: {REDIS_URL}")
r = redis.from_url(REDIS_URL, decode_responses=True)

# -------- CONFIG --------
@dataclass
class BotConfig:
    TOKEN: str = os.getenv('BOT_TOKEN', '')
    ADMIN_ID: int = int(os.getenv('ADMIN_ID', '0'))
    CHANNEL_URL: str = 'https://t.me/kuznya_music'
    EXAMPLES_URL: str = 'https://t.me/kuznya_music/41'
    WEBHOOK_PORT: int = int(os.getenv('PORT', 8080))
    MAX_MESSAGE_LENGTH: int = 4000
    RATE_LIMIT_MESSAGES: int = 5  # messages per minute
    WEBHOOK_URL: str = os.getenv('WEBHOOK_URL', '')  # e.g. https://your-app.onrender.com

# -------- TEXTS --------
class Messages:
    WELCOME = """–ü—Ä–∏–≤—ñ—Ç, {}! üëã
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º—É–∑–∏—á–Ω–æ—ó —Å—Ç—É–¥—ñ—ó Kuznya Music!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"""
    RECORDING_PROMPT = """üé§ *–ó–∞–ø–∏—Å —Ç—Ä–µ–∫—É*

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è:
‚Ä¢ –ó–∞–ø–∏—Å, –ó–≤–µ–¥–µ–Ω–Ω—è
‚Ä¢ –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è 
‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å–∏ (–ø—Ä–∏–∫–ª–∞–¥–∏)
‚Ä¢ –¢–µ—Ä–º—ñ–Ω–∏ (–∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å)

_–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É_"""
    EXAMPLES_INFO = """üéµ *–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:*

–ü–æ—Å–ª—É—Ö–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç:
{}

–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â—ñ –∑—Ä–∞–∑–∫–∏ –Ω–∞—à–æ—ó —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ!"""
    CHANNEL_INFO = """üì¢ *–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*

{}

–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ù–æ–≤—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–∫—É–ª—ñ—Å—Å—è —Å—Ç—É–¥—ñ—ó
‚Ä¢ –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏"""
    CONTACTS_INFO = """üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Å—Ç—É–¥—ñ—ó:*

Telegram: @kuznya_music
–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫' –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    MESSAGE_SENT = """‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!
–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...

_–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥_"""
    DIALOG_ENDED = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    ADMIN_REPLY = "üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{}"
    USE_MENU_BUTTONS = "ü§î –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
    ERROR_SEND_FAILED = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    ERROR_MESSAGE_TOO_LONG = f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º {BotConfig.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
    ERROR_RATE_LIMITED = "‚ùå –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É."
    ERROR_INVALID_INPUT = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

# -------- STATES --------
class UserStates:
    IDLE = 'idle'
    WAITING_FOR_MESSAGE = 'waiting_for_message'
    ADMIN_REPLYING = 'admin_replying'

# -------- LOGGING --------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# -------- SETUP --------
config = BotConfig()
if not config.TOKEN or not config.TOKEN.startswith(""):
    raise ValueError("BOT_TOKEN is not set!")
if not config.ADMIN_ID:
    raise ValueError("ADMIN_ID is not set!")
if not config.WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL is not set!")

bot = telebot.TeleBot(config.TOKEN)
try:
    bot_info = bot.get_me()
    logger.info(f"Bot token is valid! Bot name: {bot_info.first_name} (@{bot_info.username})")
except Exception as token_error:
    logger.error(f"Invalid bot token: {token_error}")
    exit(1)

# -------- UTILS --------
def is_admin(user_id: int) -> bool:
    return int(user_id) == int(config.ADMIN_ID)

def get_user_info(user) -> Dict[str, Any]:
    return {
        'id': user.id,
        'username': user.username or "–ë–µ–∑ username",
        'first_name': user.first_name or "–ù–µ–≤—ñ–¥–æ–º–æ",
        'last_name': user.last_name or "",
        'full_name': f"{user.first_name or ''} {user.last_name or ''}".strip()
    }

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫"),
        types.KeyboardButton("üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
    )
    markup.add(
        types.KeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"),
        types.KeyboardButton("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    )
    return markup

def get_chat_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    return markup

def get_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏"),
        types.KeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    )
    markup.add(
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
    )
    return markup

def validate_message(message) -> tuple[bool, str]:
    if not message or not message.text:
        return False, Messages.ERROR_INVALID_INPUT
    if len(message.text) > config.MAX_MESSAGE_LENGTH:
        return False, Messages.ERROR_MESSAGE_TOO_LONG
    if not check_rate_limit(message.from_user.id):
        return False, Messages.ERROR_RATE_LIMITED
    return True, ""

def check_rate_limit(user_id: int) -> bool:
    key = f"rate:{user_id}"
    pipe = r.pipeline()
    pipe.incr(key)
    pipe.expire(key, 60)
    count, _ = pipe.execute()
    return count <= config.RATE_LIMIT_MESSAGES

def sanitize_input(text: str) -> str:
    return html.escape(text.strip())

def set_user_state(user_id: int, state: str):
    r.set(f"user:{user_id}:state", state)

def get_user_state(user_id: int) -> str:
    return r.get(f"user:{user_id}:state") or UserStates.IDLE

def get_all_user_ids():
    ids = []
    for key in r.scan_iter("user:*:state"):
        uid = key.split(":")[1]
        if uid not in ids:
            ids.append(int(uid))
    return ids

def add_user(user_id: int):
    set_user_state(user_id, UserStates.IDLE)

def set_admin_reply_target(admin_id: int, user_id: int):
    r.set(f"admin:{admin_id}:reply", user_id)

def get_admin_reply_target(admin_id: int) -> int:
    uid = r.get(f"admin:{admin_id}:reply")
    return int(uid) if uid else None

def clear_admin_reply_target(admin_id: int):
    r.delete(f"admin:{admin_id}:reply")

# -------- HANDLERS --------

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_info = get_user_info(message.from_user)
    if is_admin(message.from_user.id):
        markup = get_admin_keyboard()
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüíº –í–∏ —É –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=markup
        )
        return
    else:
        markup = get_main_keyboard()
        add_user(message.from_user.id)
        bot.send_message(
            message.chat.id,
            Messages.WELCOME.format(user_info['first_name']),
            reply_markup=markup
        )
        return

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
def handle_admin_broadcast(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏. –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    def broadcast_handler(msg):
        txt = msg.text
        count = 0
        for uid in get_all_user_ids():
            if uid != config.ADMIN_ID:
                try:
                    bot.send_message(uid, f"üì¢ [–†–æ–∑—Å–∏–ª–∫–∞]\n\n{txt}")
                    count += 1
                except Exception:
                    pass
        bot.send_message(config.ADMIN_ID, f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

    bot.register_next_step_handler(message, broadcast_handler)
    return

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_show_stats(message):
    all_users = get_all_user_ids()
    active_users = [uid for uid in all_users if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE]
    total_users = len(all_users)
    recent_users = 0
    now = time.time()
    for uid in all_users:
        key = f"rate:{uid}"
        if r.ttl(key) > 0:
            recent_users += 1
    stats_text = f"""üìä *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
üí¨ –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤: {len(active_users)}
‚è∞ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ –≥–æ–¥–∏–Ω—É: {recent_users}
üìÖ –î–∞—Ç–∞: {time.strftime('%d.%m.%Y %H:%M')}

üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è: Upstash Redis
‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è: –∞–∫—Ç–∏–≤–Ω–µ
‚Ä¢ –†–µ–π—Ç-–ª—ñ–º—ñ—Ç–∏–Ω–≥: {config.RATE_LIMIT_MESSAGES} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å/—Ö–≤–∏–ª–∏–Ω—É"""
    bot.send_message(
        message.chat.id,
        stats_text,
        parse_mode='Markdown'
    )
    return

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏")
def handle_admin_active_dialogs(message):
    users = [uid for uid in get_all_user_ids() if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE]
    txt = "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")
    return

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
def handle_admin_users(message):
    users = [uid for uid in get_all_user_ids() if uid != config.ADMIN_ID]
    txt = "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")
    return

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫")
def handle_start_recording(message):
    user_id = message.from_user.id
    set_user_state(user_id, UserStates.WAITING_FOR_MESSAGE)
    markup = get_chat_keyboard()
    bot.send_message(
        message.chat.id,
        Messages.RECORDING_PROMPT,
        parse_mode='Markdown',
        reply_markup=markup
    )
    return

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
def handle_show_examples(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "–î–æ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ üéß",
        url=config.EXAMPLES_URL
    ))
    bot.send_message(
        message.chat.id,
        "üéµ –ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:\n\n–ü—Ä–∏–∫–ª–∞–¥–∏: –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è üéπ | –ó–≤–µ–¥–µ–Ω–Ω—è üéß | –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥—É üîä",
        reply_markup=markup
    )
    return

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_show_channel(message):
    bot.send_message(
        message.chat.id,
        Messages.CHANNEL_INFO.format(config.CHANNEL_URL),
        disable_web_page_preview=False
    )
    return

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def handle_show_contacts(message):
    bot.send_message(
        message.chat.id,
        Messages.CONTACTS_INFO
    )
    return

@bot.message_handler(func=lambda message: not is_admin(message.from_user.id) and message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")
def handle_end_dialog(message):
    user_id = message.from_user.id
    set_user_state(user_id, UserStates.IDLE)
    markup = get_main_keyboard()
    bot.send_message(
        message.chat.id,
        Messages.DIALOG_ENDED,
        reply_markup=markup
    )
    return

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserStates.WAITING_FOR_MESSAGE)
def handle_user_message(message):
    is_valid, error_msg = validate_message(message)
    if not is_valid:
        bot.send_message(message.chat.id, error_msg)
        return
    user_info = get_user_info(message.from_user)
    sanitized_text = sanitize_input(message.text)
    admin_text = f"""üí¨ *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞*

üë§ *–ö–ª—ñ—î–Ω—Ç:* {user_info['full_name']} (@{user_info['username']})
üÜî *ID:* `{user_info['id']}`
‚è∞ *–ß–∞—Å:* {time.strftime('%H:%M %d.%m.%Y')}

üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{sanitized_text}"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
        callback_data=f"reply_{user_info['id']}"
    ))
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É —Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–æ—é
    bot.send_message(
        config.ADMIN_ID,
        admin_text,
        parse_mode='Markdown',
        reply_markup=markup
    )
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É forward –¥–ª—è reply-—Ä–µ–∂–∏–º—É
    bot.forward_message(config.ADMIN_ID, message.chat.id, message.message_id)
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —é–∑–µ—Ä—É
    bot.send_message(message.chat.id, Messages.MESSAGE_SENT)
    return

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_admin_reply_callback(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return
    user_id = int(call.data.split('_')[1])
    set_admin_reply_target(config.ADMIN_ID, user_id)
    set_user_state(config.ADMIN_ID, f"{UserStates.ADMIN_REPLYING}_{user_id}")
    bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º")
    bot.send_message(
        config.ADMIN_ID,
        f"‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É (ID: {user_id}):\n\n"
        "_–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É_"
    )
    return

@bot.message_handler(func=lambda message: is_admin(message.from_user.id))
def handle_admin_reply_or_panel(message):
    admin_id = message.from_user.id

    # 1. –Ø–∫—â–æ reply –Ω–∞ forward-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞–¥–º—ñ–Ω –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É Telegram)
    if message.reply_to_message and message.reply_to_message.forward_from:
        user_id = message.reply_to_message.forward_from.id
        sanitized_reply = sanitize_input(message.text)
        bot.send_message(
            user_id,
            Messages.ADMIN_REPLY.format(sanitized_reply),
            parse_mode='Markdown'
        )
        bot.send_message(
            admin_id,
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É (ID: {user_id})",
            reply_to_message_id=message.message_id
        )
        return

    # 2. –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É callback-—Ä–µ–∂–∏–º—ñ (–Ω–∞—Ç–∏—Å–Ω—É–≤ "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏")
    state = get_user_state(admin_id)
    if state and state.startswith(UserStates.ADMIN_REPLYING):
        target_user_id = get_admin_reply_target(admin_id)
        if not target_user_id:
            bot.send_message(admin_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            return
        sanitized_reply = sanitize_input(message.text)
        bot.send_message(
            target_user_id,
            Messages.ADMIN_REPLY.format(sanitized_reply),
            parse_mode='Markdown'
        )
        bot.send_message(
            admin_id,
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É (ID: {target_user_id})",
            reply_to_message_id=message.message_id
        )
        set_user_state(admin_id, UserStates.IDLE)
        clear_admin_reply_target(admin_id)
        return

    # 3. –Ø–∫—â–æ —ñ–Ω—à–µ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫–µ –º–µ–Ω—é
    markup = get_admin_keyboard()
    bot.send_message(
        admin_id,
        Messages.USE_MENU_BUTTONS,
        reply_markup=markup
    )
    return

# -------- –ö–Ü–ù–ï–¶–¨: CATCH-ALL HANDLER --------
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if is_admin(message.from_user.id):
        markup = get_admin_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )
    else:
        markup = get_main_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )

# -------- FLASK & SELF-PING --------
app = Flask(__name__)
bot_start_time = time.time()

@app.route('/')
def health_check():
    uptime_seconds = int(time.time() - bot_start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    return f"""
    <h1>üéµ Kuznya Music Studio Bot</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</p>
    <p><strong>Uptime:</strong> {uptime_hours}–≥–æ–¥ {uptime_minutes}—Ö–≤</p>
    <p><strong>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(bot_start_time))}</p>
    <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</strong> {len(get_all_user_ids())}</p>
    """

@app.route('/health')
def health():
    try:
        bot_info = bot.get_me()
        return jsonify({
            "status": "healthy",
            "timestamp": time.time(),
            "uptime_seconds": int(time.time() - bot_start_time),
            "bot_username": bot_info.username,
            "total_users": len(get_all_user_ids()),
            "version": "3.0-admin-panel-redis"
        }), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/status')
def status():
    try:
        active_users = [uid for uid in get_all_user_ids() if get_user_state(uid) == UserStates.WAITING_FOR_MESSAGE]
        return jsonify({
            "bot_status": "running",
            "uptime_seconds": int(time.time() - bot_start_time),
            "total_users": len(get_all_user_ids()),
            "active_chats": len(active_users),
            "admin_id": config.ADMIN_ID,
            "timestamp": time.time()
        })
    except Exception as e:
        logger.error(f"Status check failed: {e}")
        return jsonify({
            "bot_status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/keepalive')
def keep_alive():
    return jsonify({
        "message": "Bot is alive!",
        "timestamp": time.time(),
        "uptime": int(time.time() - bot_start_time)
    })

# --- WEBHOOK ENDPOINT ---
@app.route(f"/bot{config.TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    else:
        return "", 403

def run_flask():
    app.run(
        host='0.0.0.0', 
        port=config.WEBHOOK_PORT, 
        debug=False,
        threaded=True
    )

def self_ping():
    url = f"{config.WEBHOOK_URL}/keepalive"
    while True:
        try:
            r2 = requests.get(url, timeout=10)
            print(f"[SELF-PING] Pinged {url} ({r2.status_code})")
        except Exception as e:
            print(f"[SELF-PING] Error pinging {url}: {e}")
        time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω

if __name__ == "__main__":
    try:
        logger.info("Starting Kuznya Music Studio Bot...")
        bot.remove_webhook()
        time.sleep(1)
        set_url = f"{config.WEBHOOK_URL}/bot{config.TOKEN}"
        webhook_result = bot.set_webhook(url=set_url)
        if webhook_result:
            logger.info(f"Webhook set: {set_url}")
        else:
            logger.warning("Webhook not set!")
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()
        selfping_thread = Thread(target=self_ping, daemon=True)
        selfping_thread.start()
        logger.info("üéµ Music Studio Bot started successfully!")
        logger.info(f"Admin ID: {config.ADMIN_ID}")
        logger.info("Bot is running via webhook. No polling!")
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        exit(1)
