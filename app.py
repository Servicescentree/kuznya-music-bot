# ... (—ñ–Ω—à—ñ —ñ–º–ø–æ—Ä—Ç–∏, –∫–ª–∞—Å–∏, —Ñ—É–Ω–∫—Ü—ñ—ó, —ñ —Ç.–¥.)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
def handle_admin_broadcast(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏. –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_show_stats(message):
    active_users = len([uid for uid, state in user_states.items() if state == UserStates.WAITING_FOR_MESSAGE])
    total_users = len(user_states)
    active_hour = len([uid for uid, data in rate_limits.items() if time.time() - data['last_reset'] < 3600])
    stats_text = f"""üìä *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
üí¨ –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤: {active_users}
‚è∞ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ –≥–æ–¥–∏–Ω—É: {active_hour}
üìÖ –î–∞—Ç–∞: {time.strftime('%d.%m.%Y %H:%M')}

üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è: In-Memory
‚Ä¢ –†–µ–π—Ç-–ª—ñ–º—ñ—Ç–∏–Ω–≥: {config.RATE_LIMIT_MESSAGES} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å/—Ö–≤–∏–ª–∏–Ω—É"""
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏")
def handle_admin_active_dialogs(message):
    users = [uid for uid, state in user_states.items() if state == UserStates.WAITING_FOR_MESSAGE]
    txt = "üì¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
def handle_admin_users(message):
    users = [uid for uid in user_states if uid != config.ADMIN_ID]
    txt = "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid in users:
        txt += f"‚Ä¢ ID: <code>{uid}</code>\n"
    if not users:
        txt += "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    bot.send_message(message.chat.id, txt, parse_mode="HTML")

# --- catch-all –æ—Å—Ç–∞–Ω–Ω—ñ–º! ---
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if is_admin(message.from_user.id):
        markup = get_admin_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )
    else:
        markup = get_main_keyboard()
        bot.send_message(
            message.chat.id,
            Messages.USE_MENU_BUTTONS,
            reply_markup=markup
        )
