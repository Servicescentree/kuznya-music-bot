import os
import time
import html
import logging
import random
import string
from threading import Thread
from typing import Optional, Dict, Any
from dataclasses import dataclass

import telebot
from telebot import types
from flask import Flask, jsonify

import requests  # <-- –¥–ª—è self-ping

# === CONFIGURATION ===
@dataclass
class BotConfig:
    TOKEN: str = os.getenv('BOT_TOKEN', '8368212048:AAF094UtSmRBYB98JUtVwYHzREuVicQFIOs')
    ADMIN_ID: int = int(os.getenv('ADMIN_ID', '7276479457'))
    CHANNEL_URL: str = 'https://t.me/kuznya_music'
    EXAMPLES_URL: str = 'https://t.me/kuznya_music/41'
    WEBHOOK_PORT: int = int(os.getenv('PORT', 8080))
    MAX_MESSAGE_LENGTH: int = 4000
    RATE_LIMIT_MESSAGES: int = 5

# === TEXTS ===
class Messages:
    WELCOME = """–ü—Ä–∏–≤—ñ—Ç, {}! üëã
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º—É–∑–∏—á–Ω–æ—ó —Å—Ç—É–¥—ñ—ó Kuznya Music!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"""
    EXAMPLES_INFO = """üéµ *–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:*\n\n–ü–æ—Å–ª—É—Ö–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç:\n{}"""
    CHANNEL_INFO = """üì¢ *–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*\n\n{}"""
    CONTACTS_INFO = """üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Å—Ç—É–¥—ñ—ó:*\nTelegram: @kuznya_music"""
    ABOUT_INFO = """‚ÑπÔ∏è *–ü—Ä–æ —Å—Ç—É–¥—ñ—é*\n\nKuznya Music - —Å—É—á–∞—Å–Ω–∞ –º—É–∑–∏—á–Ω–∞ —Å—Ç—É–¥—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É, –∑–≤–µ–¥–µ–Ω–Ω—è, –º–∞–π—Å—Ç–µ—Ä–∏–Ω–≥—É, –∞—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç–≤–æ—Ä—á–∏—Ö –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤."""
    DIALOG_STARTED = "‚úÖ –î—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    DIALOG_ENDED_USER = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!"
    DIALOG_ENDED_ADMIN = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥!"
    ADMIN_PANEL = "üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    ERROR_SEND_FAILED = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    USE_MENU_BUTTONS = "ü§î –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
    BROADCAST_PROMPT = "üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'"
    BROADCAST_DONE = "üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    BROADCAST_CANCELLED = "‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞."

# === ENHANCED DIALOG MANAGER ===
class EnhancedDialogManager:
    def __init__(self):
        self.active_dialogs = {}
        self.admin_current_dialog = {}
        self.message_history = {}
        self.users = {}
        self.user_states = {}
        self.stats = {
            'total_messages': 0,
            'total_dialogs': 0,
            'bot_start_time': time.time()
        }
        self.admin_broadcast_mode = False
        self.broadcast_text = ""

    def save_user(self, user_id, username, full_name):
        now = time.time()
        if user_id in self.users:
            self.users[user_id].update({
                'username': username,
                'full_name': full_name,
                'last_activity': now,
                'total_messages': self.users[user_id].get('total_messages', 0) + 1
            })
        else:
            self.users[user_id] = {
                'username': username,
                'full_name': full_name,
                'first_seen': now,
                'last_activity': now,
                'total_messages': 1
            }

    def get_user_info(self, user_id):
        return self.users.get(user_id, {})

    def get_all_users(self):
        return [
            (user_id, info['username'], info['full_name'], info['total_messages'], info['last_activity'], self.is_user_in_dialog(user_id))
            for user_id, info in self.users.items()
        ]

    def set_user_state(self, user_id, state):
        self.user_states[user_id] = state

    def get_user_state(self, user_id):
        return self.user_states.get(user_id, 'idle')

    def clear_user_state(self, user_id):
        self.user_states.pop(user_id, None)

    def start_dialog(self, user_id, admin_id):
        if user_id in self.active_dialogs:
            return False
        dialog_id = f"{user_id}_{admin_id}_{int(time.time())}"
        self.active_dialogs[user_id] = {
            'admin_id': admin_id,
            'started_at': time.time(),
            'message_count': 0,
            'dialog_id': dialog_id
        }
        self.message_history[dialog_id] = []
        self.stats['total_dialogs'] += 1
        self.set_user_state(user_id, 'in_dialog')
        return dialog_id

    def end_dialog(self, user_id):
        if user_id in self.active_dialogs:
            admin_id = self.active_dialogs[user_id]['admin_id']
            if self.admin_current_dialog.get(admin_id) == user_id:
                self.admin_current_dialog.pop(admin_id, None)
                self.clear_user_state(admin_id)
            dialog_id = self.active_dialogs[user_id]['dialog_id']
            self.active_dialogs.pop(user_id, None)
            self.clear_user_state(user_id)

    def is_user_in_dialog(self, user_id):
        return user_id in self.active_dialogs

    def get_active_dialogs(self):
        dialogs = []
        for user_id, dialog_info in self.active_dialogs.items():
            user_info = self.get_user_info(user_id)
            dialogs.append({
                'user_id': user_id,
                'admin_id': dialog_info['admin_id'],
                'started_at': dialog_info['started_at'],
                'message_count': dialog_info['message_count'],
                'username': user_info.get('username', ''),
                'full_name': user_info.get('full_name', 'Unknown'),
                'dialog_id': dialog_info['dialog_id']
            })
        return sorted(dialogs, key=lambda x: x['started_at'], reverse=True)

    def set_admin_current_dialog(self, admin_id, user_id):
        self.admin_current_dialog[admin_id] = user_id
        self.set_user_state(admin_id, 'admin_in_dialog')

    def get_admin_current_dialog(self, admin_id):
        return self.admin_current_dialog.get(admin_id)

    def save_message(self, user_id, message_text, is_admin=False):
        self.stats['total_messages'] += 1
        dialog_info = self.active_dialogs.get(user_id)
        if dialog_info:
            dialog_id = dialog_info['dialog_id']
            self.message_history[dialog_id].append({
                'user_id': user_id,
                'message': message_text,
                'timestamp': time.time(),
                'is_admin': is_admin
            })
            self.active_dialogs[user_id]['message_count'] += 1

    def get_statistics(self):
        return {
            'total_users': len(self.users),
            'active_dialogs': len(self.active_dialogs),
            'total_messages': self.stats['total_messages'],
            'total_dialogs': self.stats['total_dialogs'],
            'uptime_seconds': int(time.time() - self.stats['bot_start_time']),
            'users_in_dialog': len([u for u in self.users.keys() if self.is_user_in_dialog(u)])
        }

# === KEYBOARDS ===
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"),
        types.KeyboardButton("üéß –ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏")
    )
    markup.add(
        types.KeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"),
        types.KeyboardButton("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    )
    markup.add(types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ —Å—Ç—É–¥—ñ—é"))
    return markup

def get_dialog_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    return markup

def get_admin_main_keyboard(dm):
    stats = dm.get_statistics()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton(f"üí¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏ ({stats['active_dialogs']})"),
        types.KeyboardButton("üÜï –ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥")
    )
    markup.add(
        types.KeyboardButton(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({stats['total_users']})"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.add(types.KeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞"))
    return markup

def get_admin_dialog_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"),
        types.KeyboardButton("üîÑ –Ü–Ω—à–∏–π –¥—ñ–∞–ª–æ–≥")
    )
    markup.add(types.KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return markup

def get_cancel_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    return markup

# === LOGGING ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

config = BotConfig()
dialog_manager = EnhancedDialogManager()

# === BOT INIT ===
if not config.TOKEN or not config.ADMIN_ID:
    logger.error("BOT_TOKEN or ADMIN_ID not set")
    exit(1)

bot = telebot.TeleBot(config.TOKEN)

def is_admin(user_id): return user_id == config.ADMIN_ID

def get_user_info(user):
    return {
        'id': user.id,
        'username': user.username or "",
        'first_name': user.first_name or "",
        'last_name': user.last_name or "",
        'full_name': f"{user.first_name or ''} {user.last_name or ''}".strip()
    }

def sanitize_input(text): return html.escape(text.strip())

# === MESSAGE HANDLERS ===
# ... (—Ç—É—Ç –∑–∞–ª–∏—à–∞—î—à —É—Å—ñ —Å–≤–æ—ó –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫ —Ä–∞–Ω—ñ—à–µ)

# === FLASK HEALTH ===
app = Flask(__name__)
bot_start_time = time.time()

@app.route('/')
def health_check():
    uptime_seconds = int(time.time() - bot_start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    return f"""
    <h1>üéµ Kuznya Music Studio Bot</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</p>
    <p><strong>Uptime:</strong> {uptime_hours}–≥–æ–¥ {uptime_minutes}—Ö–≤</p>
    <p><strong>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(bot_start_time))}</p>
    <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</strong> {len(dialog_manager.users)}</p>
    """

@app.route('/keepalive')
def keep_alive():
    return jsonify({
        "message": "Bot is alive!",
        "timestamp": time.time(),
        "uptime": int(time.time() - bot_start_time)
    })

def run_flask():
    app.run(
        host='0.0.0.0',
        port=config.WEBHOOK_PORT,
        debug=False,
        threaded=True
    )

# === –ü–†–û–°–¢–ò–ô SELF-PING –ë–ï–ó ENV ===
def self_ping():
    port = config.WEBHOOK_PORT
    url = f"http://localhost:{port}/keepalive"
    while True:
        try:
            r = requests.get(url, timeout=10)
            print(f"[SELF-PING] Pinged {url} ({r.status_code})")
        except Exception as e:
            print(f"[SELF-PING] Error pinging {url}: {e}")
        time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω

# === MAIN EXECUTION ===
if __name__ == "__main__":
    try:
        logger.info("Starting Kuznya Music Studio Bot...")
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info(f"Flask server started on port {config.WEBHOOK_PORT}")

        # --- Self-ping –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–∫—Ä–µ–º–∏–º –ø–æ—Ç–æ–∫–æ–º ---
        selfping_thread = Thread(target=self_ping, daemon=True)
        selfping_thread.start()
        logger.info("Self-ping thread started.")

        time.sleep(2)
        bot.polling(none_stop=True, interval=1, timeout=30)

    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        try:
            bot.stop_polling()
        except:
            pass
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        try:
            bot.stop_polling()
        except:
            pass
        exit(1)
