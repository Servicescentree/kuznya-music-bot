import os
import time
import logging
import telebot
from telebot import types
from flask import Flask, jsonify
from threading import Thread

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'your_token_here')
ADMIN_ID = int(os.getenv('ADMIN_ID', '7276479457'))
PORT = int(os.getenv('PORT', 8080))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø—Ä–æ—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑–∞–º—ñ—Å—Ç—å –ë–î)
user_states = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
CHANNEL_URL = 'https://t.me/kuznya_music'
EXAMPLES_URL = 'https://t.me/kuznya_music/41'

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
MESSAGES = {
    'welcome': """–ü—Ä–∏–≤—ñ—Ç, {}! üëã
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º—É–∑–∏—á–Ω–æ—ó —Å—Ç—É–¥—ñ—ó Kuznya Music!

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:""",
    
    'recording_prompt': """üé§ *–ó–∞–ø–∏—Å —Ç—Ä–µ–∫—É*

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è:
‚Ä¢ –ó–∞–ø–∏—Å, –ó–≤–µ–¥–µ–Ω–Ω—è
‚Ä¢ –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è 
‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å–∏ (–ø—Ä–∏–∫–ª–∞–¥–∏)
‚Ä¢ –¢–µ—Ä–º—ñ–Ω–∏ (–∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å)

_–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É_""",
    
    'examples_info': f"""üéµ *–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:*

–ü–æ—Å–ª—É—Ö–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç:
{EXAMPLES_URL}

–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â—ñ –∑—Ä–∞–∑–∫–∏ –Ω–∞—à–æ—ó —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ!""",
    
    'channel_info': f"""üì¢ *–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*

{CHANNEL_URL}

–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ù–æ–≤—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–∫—É–ª—ñ—Å—Å—è —Å—Ç—É–¥—ñ—ó
‚Ä¢ –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏""",
    
    'contacts_info': """üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Å—Ç—É–¥—ñ—ó:*

Telegram: @kuznya_music
–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫' –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É""",
    
    'message_sent': """‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!
–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...

_–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥_""",
    
    'dialog_ended': "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫"),
        types.KeyboardButton("üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
    )
    markup.add(
        types.KeyboardButton("üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"),
        types.KeyboardButton("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    )
    return markup

def get_chat_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    return markup

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        user_id = message.from_user.id
        user_states[user_id] = 'idle'
        
        first_name = message.from_user.first_name or "–¥—Ä—É–∂–µ"
        markup = get_main_keyboard()
        
        bot.send_message(
            message.chat.id,
            MESSAGES['welcome'].format(first_name),
            reply_markup=markup
        )
        logger.info(f"User {user_id} started bot")
    except Exception as e:
        logger.error(f"Error in start: {e}")

@bot.message_handler(func=lambda message: message.text == "üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫")
def handle_recording(message):
    try:
        user_id = message.from_user.id
        user_states[user_id] = 'waiting_message'
        
        markup = get_chat_keyboard()
        bot.send_message(
            message.chat.id,
            MESSAGES['recording_prompt'],
            parse_mode='Markdown',
            reply_markup=markup
        )
        logger.info(f"User {user_id} started recording mode")
    except Exception as e:
        logger.error(f"Error in recording: {e}")

@bot.message_handler(func=lambda message: message.text == "üéß –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç")
def handle_examples(message):
    try:
        bot.send_message(
            message.chat.id,
            MESSAGES['examples_info'],
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in examples: {e}")

@bot.message_handler(func=lambda message: message.text == "üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_channel(message):
    try:
        bot.send_message(
            message.chat.id,
            MESSAGES['channel_info'],
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in channel: {e}")

@bot.message_handler(func=lambda message: message.text == "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def handle_contacts(message):
    try:
        bot.send_message(
            message.chat.id,
            MESSAGES['contacts_info'],
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in contacts: {e}")

@bot.message_handler(func=lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")
def handle_end_dialog(message):
    try:
        user_id = message.from_user.id
        user_states[user_id] = 'idle'
        
        markup = get_main_keyboard()
        bot.send_message(
            message.chat.id,
            MESSAGES['dialog_ended'],
            reply_markup=markup
        )
        logger.info(f"User {user_id} ended dialog")
    except Exception as e:
        logger.error(f"Error in end dialog: {e}")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_message')
def handle_user_message(message):
    try:
        user = message.from_user
        user_id = user.id
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
        admin_text = f"""üí¨ *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞*

üë§ *–ö–ª—ñ—î–Ω—Ç:* {user.first_name or ''} {user.last_name or ''}
üÜî *Username:* @{user.username or '–Ω–µ–º–∞—î'}
üÜî *ID:* {user_id}
‚è∞ *–ß–∞—Å:* {time.strftime('%H:%M %d.%m.%Y')}

üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{message.text}"""
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", 
            callback_data=f"reply_{user_id}"
        ))
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
        bot.send_message(
            ADMIN_ID,
            admin_text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        bot.send_message(message.chat.id, MESSAGES['message_sent'])
        
        logger.info(f"Message forwarded from user {user_id} to admin")
        
    except Exception as e:
        logger.error(f"Error forwarding message: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_admin_reply_callback(call):
    try:
        if call.from_user.id != ADMIN_ID:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return
        
        user_id = int(call.data.split('_')[1])
        user_states[ADMIN_ID] = f'replying_{user_id}'
        
        bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º")
        bot.send_message(
            ADMIN_ID,
            f"‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É (ID: {user_id}):\n\n_–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É_",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in reply callback: {e}")

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and user_states.get(ADMIN_ID, '').startswith('replying_'))
def handle_admin_reply(message):
    try:
        admin_state = user_states.get(ADMIN_ID, '')
        target_user_id = int(admin_state.split('_')[1])
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        reply_text = f"üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message.text}"
        bot.send_message(target_user_id, reply_text, parse_mode='Markdown')
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∞–¥–º—ñ–Ω—É
        bot.send_message(ADMIN_ID, f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—É (ID: {target_user_id})")
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞
        user_states[ADMIN_ID] = 'idle'
        
        logger.info(f"Admin replied to user {target_user_id}")
        
    except Exception as e:
        logger.error(f"Error in admin reply: {e}")
        bot.send_message(ADMIN_ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        user_states[ADMIN_ID] = 'idle'

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    try:
        if user_states.get(message.from_user.id, 'idle') == 'idle':
            markup = get_main_keyboard()
            bot.send_message(
                message.chat.id,
                "ü§î –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in other messages: {e}")

# Flask –¥–ª—è health check
app = Flask(__name__)

@app.route('/')
def home():
    return "üéµ Kuznya Music Bot is running!"

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "timestamp": time.time()})

def run_flask():
    app.run(host='0.0.0.0', port=PORT)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        logger.info(f"Flask server started on port {PORT}")
        logger.info("üéµ Music Studio Bot started!")
        logger.info(f"Admin ID: {ADMIN_ID}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        bot.polling(none_stop=True, interval=1, timeout=30)
        
    except Exception as e:
        logger.error(f"Critical error: {e}")
