import os
import time
import html
import logging
import sqlite3
from threading import Thread
from typing import Optional, Dict, Any
from dataclasses import dataclass

import telebot
from telebot import types
from flask import Flask, jsonify

import requests  # for self-ping
from datetime import datetime

# --- CONFIG ---
@dataclass
class BotConfig:
    TOKEN: str = os.getenv('BOT_TOKEN', '8368212048:AAF094UtSmRBYB98JUtVwYHzREuVicQFIOs')
    ADMIN_ID: int = int(os.getenv('ADMIN_ID', '7276479457'))
    WEBHOOK_PORT: int = int(os.getenv('PORT', 8080))
    MAX_MESSAGE_LENGTH: int = 4000
    RATE_LIMIT_MESSAGES: int = 5

# --- LOGGING ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # Only console logging for Render
)
logger = logging.getLogger(__name__)

config = BotConfig()

# --- DATABASE ---
DB_FILE = "musicstudio.db"

def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        # Users
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                first_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_messages INTEGER DEFAULT 0,
                in_dialog BOOLEAN DEFAULT 0,
                dialog_with INTEGER DEFAULT NULL
            )
        ''')
        # Messages
        c.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                full_name TEXT,
                message_text TEXT,
                message_type TEXT DEFAULT 'text',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_from_admin BOOLEAN DEFAULT 0,
                dialog_id INTEGER
            )
        ''')
        # Dialogs
        c.execute('''
            CREATE TABLE IF NOT EXISTS dialogs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                admin_id INTEGER NOT NULL,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ended_at TIMESTAMP DEFAULT NULL,
                is_active BOOLEAN DEFAULT 1
            )
        ''')
        conn.commit()
logger.info("DB: Initializing database...")
init_db()

# --- TELEGRAM BOT ---
try:
    bot = telebot.TeleBot(config.TOKEN)
    bot_info = bot.get_me()
    logger.info(f"Bot token is valid! Bot name: {bot_info.first_name} (@{bot_info.username})")
except Exception as token_error:
    logger.error(f"Invalid bot token: {token_error}")
    exit(1)

# --- DATABASE HELPERS ---
def save_user(user_id, username, full_name):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        if c.fetchone():
            c.execute('''
                UPDATE users SET username=?, full_name=?, last_activity=?, total_messages=total_messages+1
                WHERE user_id=?
            ''', (username, full_name, datetime.now(), user_id))
        else:
            c.execute('''
                INSERT INTO users (user_id, username, full_name, last_activity, total_messages, in_dialog)
                VALUES (?, ?, ?, ?, 1, 0)
            ''', (user_id, username, full_name, datetime.now()))
        conn.commit()

def save_message(user_id, username, full_name, message_text, message_type='text', is_from_admin=False, dialog_id=None):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('''
            INSERT INTO messages (user_id, username, full_name, message_text, message_type, is_from_admin, dialog_id)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, username, full_name, message_text, message_type, int(is_from_admin), dialog_id))
        conn.commit()

def start_dialog(user_id, admin_id):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('SELECT id FROM dialogs WHERE user_id=? AND is_active=1', (user_id,))
        row = c.fetchone()
        if row:
            return row[0]
        c.execute('INSERT INTO dialogs (user_id, admin_id) VALUES (?, ?)', (user_id, admin_id))
        dialog_id = c.lastrowid
        c.execute('UPDATE users SET in_dialog=1, dialog_with=? WHERE user_id=?', (admin_id, user_id))
        conn.commit()
        return dialog_id

def end_dialog(user_id):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('UPDATE dialogs SET is_active=0, ended_at=? WHERE user_id=? AND is_active=1', (datetime.now(), user_id))
        c.execute('UPDATE users SET in_dialog=0, dialog_with=NULL WHERE user_id=?', (user_id,))
        conn.commit()

def get_active_dialog(user_id):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('SELECT id, admin_id FROM dialogs WHERE user_id=? AND is_active=1', (user_id,))
        return c.fetchone()

def get_user_info(user_id):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('SELECT username, full_name, in_dialog, dialog_with FROM users WHERE user_id=?', (user_id,))
        return c.fetchone()

def get_all_users():
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('SELECT user_id, username, full_name, total_messages, last_activity, in_dialog FROM users WHERE user_id != ? ORDER BY in_dialog DESC, last_activity DESC', (config.ADMIN_ID,))
        return c.fetchall()

def get_admin_active_dialogs():
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('''
            SELECT d.id, d.user_id, u.username, u.full_name, d.started_at,
              (SELECT COUNT(*) FROM messages m WHERE m.dialog_id = d.id) as msg_count
            FROM dialogs d
            JOIN users u ON d.user_id = u.user_id
            WHERE d.is_active=1 AND d.admin_id=?
            ORDER BY d.started_at DESC
        ''', (config.ADMIN_ID,))
        return c.fetchall()

def get_dialog_messages(dialog_id, limit=30):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute('''
            SELECT message_text, is_from_admin, created_at
            FROM messages
            WHERE dialog_id = ?
            ORDER BY id ASC
            LIMIT ?
        ''', (dialog_id, limit))
        return c.fetchall()

# --- KEYBOARDS ---
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"),
        types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞"),
        types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    )
    return markup

def dialog_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    return markup

def admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üí¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏"),
        types.KeyboardButton("üÜï –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥"),
        types.KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º")
    )
    return markup

def admin_dialog_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"),
        types.KeyboardButton("üîÑ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É"),
        types.KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    )
    return markup

def cancel_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    return markup

# --- STATES (simple in-memory for admin) ---
admin_state = {}
BROADCAST = "broadcast"
ADMIN_DIALOG = "admin_dialog"

# --- MESSAGE HANDLERS ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    user = message.from_user
    save_user(user.id, user.username, user.full_name)
    if user.id == config.ADMIN_ID:
        active_dialogs = get_admin_active_dialogs()
        if active_dialogs:
            bot.send_message(
                user.id,
                f"üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\nüü¢ –£ –≤–∞—Å —î {len(active_dialogs)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
                reply_markup=admin_keyboard(),
                parse_mode="HTML"
            )
        else:
            bot.send_message(
                user.id,
                "üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å!\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º.",
                reply_markup=admin_keyboard(),
                parse_mode="HTML"
            )
        admin_state.clear()
    else:
        dialog = get_active_dialog(user.id)
        if dialog:
            bot.send_message(
                user.id,
                "üí¨ <b>–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –¥—ñ–∞–ª–æ–≥—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n–ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ó—Ö –±–∞—á–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ!",
                reply_markup=dialog_keyboard(),
                parse_mode="HTML"
            )
        else:
            bot.send_message(
                user.id,
                f"üëã <b>–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!</b>\n\nü§ñ –Ø —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!\n\n–í–∏ –º–æ–∂–µ—Ç–µ:\n‚ñ´Ô∏è –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n‚ñ´Ô∏è –í–µ—Å—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\n‚ñ´Ô∏è –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É\n\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:",
                reply_markup=main_keyboard(),
                parse_mode="HTML"
            )

@bot.message_handler(func=lambda m: m.text == "üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥")
def start_dialog_user(message):
    user = message.from_user
    if user.id == config.ADMIN_ID:
        admin_start_new_dialog(message)
        return
    dialog = get_active_dialog(user.id)
    if dialog:
        bot.send_message(
            user.id,
            "üí¨ <b>–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É!</b>\n\n–ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ó—Ö –±–∞—á–∏—Ç—å.",
            reply_markup=dialog_keyboard(),
            parse_mode="HTML"
        )
        return
    dialog_id = start_dialog(user.id, config.ADMIN_ID)
    bot.send_message(
        user.id,
        "‚úÖ <b>–î—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ!</b>\n\nüí¨ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n–ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ó—Ö –±–∞—á–∏—Ç—å –º–∏—Ç—Ç—î–≤–æ!",
        reply_markup=dialog_keyboard(),
        parse_mode="HTML"
    )
    admin_text = (
        f"üÜï <b>–ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ!</b>\n\n"
        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user.full_name}\n"
        f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
        f"üìß <b>Username:</b> @{user.username or '–Ω–µ–º–∞—î'}\n\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \"üí¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏\" –¥–ª—è –≤—Ö–æ–¥—É –≤ –¥—ñ–∞–ª–æ–≥."
    )
    try:
        bot.send_message(config.ADMIN_ID, admin_text, parse_mode="HTML")
    except Exception as e:
        logger.warning(f"ADMIN notify fail: {e}")

@bot.message_handler(func=lambda m: m.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")
def end_dialog_user(message):
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        if admin_state.get("state") == ADMIN_DIALOG:
            dialog_user_id = admin_state.get("user_id")
            if dialog_user_id:
                end_dialog(dialog_user_id)
                try:
                    bot.send_message(
                        dialog_user_id,
                        "‚úÖ <b>–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n–î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.",
                        reply_markup=main_keyboard(),
                        parse_mode="HTML"
                    )
                except:
                    pass
            admin_state.clear()
            bot.send_message(
                config.ADMIN_ID,
                "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                reply_markup=admin_keyboard()
            )
        else:
            bot.send_message(
                config.ADMIN_ID,
                "‚ùå –í–∏ –Ω–µ –≤ –¥—ñ–∞–ª–æ–∑—ñ",
                reply_markup=admin_keyboard()
            )
    else:
        dialog = get_active_dialog(user_id)
        if not dialog:
            bot.send_message(
                user_id,
                "‚ùå –í–∏ –Ω–µ –≤ –¥—ñ–∞–ª–æ–∑—ñ",
                reply_markup=main_keyboard()
            )
            return
        end_dialog(user_id)
        bot.send_message(
            user_id,
            "‚úÖ <b>–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n–î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.",
            reply_markup=main_keyboard(),
            parse_mode="HTML"
        )
        try:
            user_info = get_user_info(user_id)
            if user_info:
                username, full_name, _, _ = user_info
                bot.send_message(
                    config.ADMIN_ID,
                    f"‚ùå <b>–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º</b>\n\nüë§ {full_name} (@{username or '–Ω–µ–º–∞—î'})",
                    parse_mode="HTML"
                )
        except:
            pass

@bot.message_handler(func=lambda m: m.text == "üí¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏" and m.from_user.id == config.ADMIN_ID)
def admin_active_dialogs(message):
    dialogs = get_admin_active_dialogs()
    if not dialogs:
        bot.send_message(
            config.ADMIN_ID,
            "üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏</b>\n\n–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \"üÜï –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥\" –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.",
            parse_mode="HTML"
        )
        return
    response = "üí¨ <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏:</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    for dialog_id, user_id, username, full_name, started_at, msg_count in dialogs:
        started = datetime.fromisoformat(started_at).strftime("%d.%m %H:%M")
        response += f"üë§ <b>{full_name}</b>\nüìß @{username or '–Ω–µ–º–∞—î'} | üÜî <code>{user_id}</code>\nüìÖ –ü–æ—á–∞—Ç–æ: {started} | üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {msg_count}\n\n"
        markup.add(types.InlineKeyboardButton(
            f"üí¨ {full_name[:20]}{'...' if len(full_name) > 20 else ''}",
            callback_data=f"enter_dialog_{user_id}"
        ))
    bot.send_message(config.ADMIN_ID, response, reply_markup=markup, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üÜï –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥" and m.from_user.id == config.ADMIN_ID)
def admin_start_new_dialog(message):
    users = get_all_users()
    if not users:
        bot.send_message(config.ADMIN_ID, "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î")
        return
    free_users = [u for u in users if not u[5]]
    response = "üÜï <b>–ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –∑:</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    if not free_users:
        bot.send_message(
            config.ADMIN_ID,
            "üÜï <b>–ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥</b>\n\n‚ùå –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∂–µ –º–∞—é—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \"üí¨ –ê–∫—Ç–∏–≤–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏\" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤.",
            parse_mode="HTML"
        )
        return
    for user_id, username, full_name, total_msg, last_activity, in_dialog in free_users[:15]:
        last_active = datetime.fromisoformat(last_activity).strftime("%d.%m %H:%M")
        response += f"üë§ <b>{full_name}</b>\nüìß @{username or '–Ω–µ–º–∞—î'} | üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_msg}\n‚è∞ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {last_active}\n\n"
        markup.add(types.InlineKeyboardButton(
            f"üí¨ {full_name[:25]}{'...' if len(full_name) > 25 else ''}",
            callback_data=f"start_new_dialog_{user_id}"
        ))
    if len(free_users) > 15:
        response += f"... —ñ —â–µ {len(free_users) - 15} –≤—ñ–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    bot.send_message(config.ADMIN_ID, response, reply_markup=markup, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üîÑ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É" and m.from_user.id == config.ADMIN_ID)
def admin_switch_dialog(message):
    admin_state.clear()
    admin_active_dialogs(message)

@bot.message_handler(func=lambda m: m.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" and m.from_user.id == config.ADMIN_ID)
def admin_return_to_menu(message):
    admin_state.clear()
    bot.send_message(
        config.ADMIN_ID,
        "üè† –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=admin_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º" and m.from_user.id == config.ADMIN_ID)
def broadcast_message(message):
    admin_state.clear()
    admin_state["state"] = BROADCAST
    bot.send_message(
        config.ADMIN_ID,
        "üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=cancel_keyboard(),
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: admin_state.get("state") == BROADCAST and m.from_user.id == config.ADMIN_ID)
def process_broadcast(message):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        admin_state.clear()
        bot.send_message(
            config.ADMIN_ID, "‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=admin_keyboard()
        )
        return
    broadcast_text = message.text
    users = get_all_users()
    if not users:
        bot.send_message(
            config.ADMIN_ID,
            "‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏",
            reply_markup=admin_keyboard()
        )
        admin_state.clear()
        return
    bot.send_message(config.ADMIN_ID, "üì° –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É... –ó–∞—á–µ–∫–∞–π—Ç–µ.")
    success_count = 0
    blocked_count = 0
    for user_id, username, full_name, _, _, _ in users:
        if user_id == config.ADMIN_ID:
            continue
        try:
            bot.send_message(
                user_id,
                f"üì¢ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_text}",
                parse_mode="HTML"
            )
            success_count += 1
        except Exception as e:
            blocked_count += 1
    bot.send_message(
        config.ADMIN_ID,
        f"üìä <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count}\n‚ùå –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ/–ø–æ–º–∏–ª–∫–∏: {blocked_count}\nüìã –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\nüí¨ –¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏: <i>{broadcast_text}</i>",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    admin_state.clear()

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞")
def about_bot(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>–ü—Ä–æ –±–æ—Ç–∞</b>\n\nü§ñ –Ø —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—ñ–∞–ª–æ–≥—ñ–≤!\n\n–ú–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n‚ñ´Ô∏è –ì–Ω—É—á–∫—ñ –¥—ñ–∞–ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n‚ñ´Ô∏è –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –¥—ñ–∞–ª–æ–≥—ñ–≤\n‚ñ´Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø—ñ–ª–∫—É–≤–∞–Ω—å\n‚ñ´Ô∏è –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n\nüíª –í–µ—Ä—Å—ñ—è: 3.0 (–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –¥—ñ–∞–ª–æ–≥–∞–º–∏)\nüìÖ –û–Ω–æ–≤–ª–µ–Ω–æ: 2025",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def contacts(message):
    bot.send_message(
        message.chat.id,
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n\nü§ñ –î–ª—è –∑–≤'—è–∑–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—å–æ–≥–æ –±–æ—Ç–∞\nüí¨ –†–æ–∑–ø–æ—á–Ω—ñ—Ç—å –¥—ñ–∞–ª–æ–≥ —ñ —Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\n\n‚è∞ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∑–≤–∏—á–∞–π –æ–Ω–ª–∞–π–Ω —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —à–≤–∏–¥–∫–æ",
        parse_mode="HTML"
    )

@bot.message_handler(func=lambda m: m.text == "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" and m.from_user.id == config.ADMIN_ID)
def users_list(message):
    users = get_all_users()
    if not users:
        bot.send_message(config.ADMIN_ID, "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î")
        return
    response = "üë• <b>–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
    for user_id, username, full_name, total_msg, last_activity, in_dialog in users[:20]:
        last_active = datetime.fromisoformat(last_activity).strftime("%d.%m %H:%M")
        status = "üü¢ –í –¥—ñ–∞–ª–æ–∑—ñ" if in_dialog else "‚ö™ –í—ñ–ª—å–Ω–∏–π"
        response += f"üë§ <b>{full_name}</b> {status}\nüÜî ID: <code>{user_id}</code>\nüìß @{username or '–Ω–µ–º–∞—î'}\nüì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_msg}\n‚è∞ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {last_active}\n\n"
    if len(users) > 20:
        response += f"... —ñ —â–µ {len(users) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    bot.send_message(config.ADMIN_ID, response, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and m.from_user.id == config.ADMIN_ID)
def statistics(message):
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id != ?", (config.ADMIN_ID,))
        total_users = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM messages")
        total_messages = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM dialogs")
        total_dialogs = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM dialogs WHERE is_active = 1")
        active_dialogs = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM users WHERE in_dialog = 1")
        users_in_dialog = c.fetchone()[0]
    bot.send_message(
        config.ADMIN_ID,
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\nüë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\nüì® –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_messages}\nüí¨ –í—Å—å–æ–≥–æ –¥—ñ–∞–ª–æ–≥—ñ–≤: {total_dialogs}\nüü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤: {active_dialogs}\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –¥—ñ–∞–ª–æ–∑—ñ: {users_in_dialog}",
        parse_mode="HTML"
    )

# --- CALLBACK HANDLERS ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_new_dialog_"))
def start_new_dialog_callback(call):
    if call.from_user.id != config.ADMIN_ID:
        return
    user_id = int(call.data.split("_")[3])
    user_info = get_user_info(user_id)
    if not user_info:
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    username, full_name, in_dialog, dialog_with = user_info
    if in_dialog:
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –¥—ñ–∞–ª–æ–∑—ñ")
        return
    dialog_id = start_dialog(user_id, config.ADMIN_ID)
    admin_state.clear()
    admin_state["state"] = ADMIN_DIALOG
    admin_state["user_id"] = user_id
    admin_state["dialog_id"] = dialog_id
    bot.edit_message_text(
        f"‚úÖ <b>–ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∑ {full_name}!</b>\n\nüí¨ –ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ó—Ö –±–∞—á–∏—Ç—å –º–∏—Ç—Ç—î–≤–æ!",
        call.message.chat.id, call.message.message_id, parse_mode="HTML"
    )
    bot.send_message(
        config.ADMIN_ID,
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–º:",
        reply_markup=admin_dialog_keyboard()
    )
    try:
        bot.send_message(
            user_id,
            "üí¨ <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–ø–æ—á–∞–≤ –∑ –≤–∞–º–∏ –¥—ñ–∞–ª–æ–≥!</b>\n\n–ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ó—Ö –±–∞—á–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.",
            reply_markup=dialog_keyboard(),
            parse_mode="HTML"
        )
    except:
        pass
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("enter_dialog_"))
def admin_enter_dialog(call):
    if call.from_user.id != config.ADMIN_ID:
        return
    user_id = int(call.data.split("_")[2])
    dialog = get_active_dialog(user_id)
    if not dialog:
        bot.answer_callback_query(call.id, "–î—ñ–∞–ª–æ–≥ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
        return
    admin_state.clear()
    admin_state["state"] = ADMIN_DIALOG
    admin_state["user_id"] = user_id
    admin_state["dialog_id"] = dialog[0]
    user_info = get_user_info(user_id)
    username, full_name, _, _ = user_info
    bot.edit_message_text(
        f"üí¨ <b>–î—ñ–∞–ª–æ–≥ –∑ {full_name}</b>\n\n–ü–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ó—Ö –±–∞—á–∏—Ç—å –º–∏—Ç—Ç—î–≤–æ!",
        call.message.chat.id, call.message.message_id, parse_mode="HTML"
    )
    bot.send_message(
        config.ADMIN_ID,
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–º:",
        reply_markup=admin_dialog_keyboard()
    )
    bot.answer_callback_query(call.id)

# --- –î–Ü–ê–õ–û–ì–û–í–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ---
@bot.message_handler(func=lambda m: get_active_dialog(m.from_user.id) is not None and m.text not in [
    "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", "üîÑ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"])
def handle_user_dialog_message(message):
    user = message.from_user
    dialog = get_active_dialog(user.id)
    if not dialog:
        bot.send_message(
            user.id,
            "‚ùå –î—ñ–∞–ª–æ–≥ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=main_keyboard()
        )
        return
    dialog_id, admin_id = dialog
    message_text = message.text or "[–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª]"
    save_message(user.id, user.username, user.full_name, message_text, "text", False, dialog_id)
    admin_text = f"üí¨ <b>–î—ñ–∞–ª–æ–≥ –∑ {user.full_name}</b>\n\nüë§ {message_text}"
    try:
        bot.send_message(admin_id, admin_text, parse_mode="HTML")
    except Exception as e:
        logger.warning(f"ADMIN dialog send error: {e}")
    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è —é–∑–µ—Ä–∞:
    bot.send_message(
        user.id,
        "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(func=lambda m: m.from_user.id == config.ADMIN_ID and admin_state.get("state") == ADMIN_DIALOG and m.text not in [
    "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", "üîÑ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"])
def handle_admin_dialog_message(message):
    data = admin_state
    user_id = data.get("user_id")
    dialog_id = data.get("dialog_id")
    if not user_id or not dialog_id:
        bot.send_message(config.ADMIN_ID, "–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥—ñ–∞–ª–æ–≥—É –≤—Ç—Ä–∞—á–µ–Ω–æ", reply_markup=admin_keyboard())
        admin_state.clear()
        return
    message_text = message.text or "[–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª]"
    save_message(user_id, "admin", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", message_text, "text", True, dialog_id)
    user_text = f"üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω:</b> {message_text}"
    try:
        bot.send_message(user_id, user_text, parse_mode="HTML")
    except Exception as e:
        bot.send_message(config.ADMIN_ID, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞:
    bot.send_message(
        config.ADMIN_ID,
        "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        reply_to_message_id=message.message_id
    )

# --- UNKNOWN HANDLER ---
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    save_user(user_id, message.from_user.username, message.from_user.full_name)
    if user_id != config.ADMIN_ID:
        dialog = get_active_dialog(user_id)
        if dialog:
            handle_user_dialog_message(message)
            return
    elif user_id == config.ADMIN_ID and admin_state.get("state") == ADMIN_DIALOG:
        handle_admin_dialog_message(message)
        return
    if user_id == config.ADMIN_ID:
        bot.send_message(
            user_id,
            "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=admin_keyboard()
        )
    else:
        bot.send_message(
            user_id,
            "‚ùì –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—Å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start",
            reply_markup=main_keyboard()
        )

# --- FLASK SERVER FOR RENDER/UPTIME/SELF-PING ---
app = Flask(__name__)
bot_start_time = time.time()

@app.route('/')
def health_check():
    uptime_seconds = int(time.time() - bot_start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users")
        users = c.fetchone()[0]
    return f"""
    <h1>üéµ Kuznya Music Studio Bot</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</p>
    <p><strong>Uptime:</strong> {uptime_hours}–≥–æ–¥ {uptime_minutes}—Ö–≤</p>
    <p><strong>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</strong> {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(bot_start_time))}</p>
    <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</strong> {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p><strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</strong> {users}</p>
    """

@app.route('/health')
def health():
    try:
        bot_info = bot.get_me()
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM users")
            users = c.fetchone()[0]
        return jsonify({
            "status": "healthy",
            "timestamp": time.time(),
            "uptime_seconds": int(time.time() - bot_start_time),
            "bot_username": bot_info.username,
            "total_users": users,
            "version": "3.0-telebot"
        }), 200
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/status')
def status():
    try:
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM users")
            users = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM dialogs WHERE is_active=1")
            active = c.fetchone()[0]
        return jsonify({
            "bot_status": "running",
            "uptime_seconds": int(time.time() - bot_start_time),
            "total_users": users,
            "active_chats": active,
            "admin_id": config.ADMIN_ID,
            "timestamp": time.time()
        })
    except Exception as e:
        logger.error(f"Status check failed: {e}")
        return jsonify({
            "bot_status": "error",
            "error": str(e),
            "timestamp": time.time()
        }), 500

@app.route('/keepalive')
def keep_alive():
    return jsonify({
        "message": "Bot is alive!",
        "timestamp": time.time(),
        "uptime": int(time.time() - bot_start_time)
    })

def run_flask():
    app.run(
        host='0.0.0.0',
        port=config.WEBHOOK_PORT,
        debug=False,
        threaded=True
    )

# --- SELF-PING ---
def self_ping():
    port = config.WEBHOOK_PORT
    url = f"http://localhost:{port}/keepalive"
    while True:
        try:
            r = requests.get(url, timeout=10)
            print(f"[SELF-PING] Pinged {url} ({r.status_code})")
        except Exception as e:
            print(f"[SELF-PING] Error pinging {url}: {e}")
        time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω

# --- MAIN ---
if __name__ == "__main__":
    try:
        logger.info("Starting Music Studio Bot...")
        flask_thread = Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info(f"Flask server started on port {config.WEBHOOK_PORT}")
        selfping_thread = Thread(target=self_ping, daemon=True)
        selfping_thread.start()
        logger.info("Self-ping thread started (every 5 minutes).")
        logger.info("Health check endpoints available:")
        logger.info(f"  - Main: http://localhost:{config.WEBHOOK_PORT}/")
        logger.info(f"  - Health: http://localhost:{config.WEBHOOK_PORT}/health")
        logger.info(f"  - Ping: http://localhost:{config.WEBHOOK_PORT}/ping")
        logger.info(f"  - Status: http://localhost:{config.WEBHOOK_PORT}/status")
        try:
            bot.remove_webhook()
            bot.stop_polling()
        except Exception as clear_error:
            logger.warning(f"Error clearing previous instances: {clear_error}")
        time.sleep(5)
        logger.info("üéµ Music Studio Bot started successfully!")
        logger.info(f"Admin ID: {config.ADMIN_ID}")
        logger.info("Bot is polling for messages...")
        bot.polling(none_stop=True, interval=1, timeout=30)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        try:
            bot.stop_polling()
        except:
            pass
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        try:
            bot.stop_polling()
        except:
            pass
        exit(1)
