import os
import time
import html
import logging
import sqlite3
from threading import Thread
from typing import Optional, Dict, Any
from dataclasses import dataclass
from contextlib import contextmanager

import telebot
from telebot import types
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
@dataclass
class BotConfig:
    TOKEN: str = os.getenv('BOT_TOKEN', '8368212048:AAFPu81rvI7ISpmtixdgD1cOybAQ6T_rMjI')
    ADMIN_ID: int = 7276479457
    CHANNEL_URL: str = 'https://t.me/kuznya_music'
    EXAMPLES_URL: str = 'https://t.me/kuznya_music/41'
    DATABASE_PATH: str = 'bot_data.db'
    WEBHOOK_PORT: int = int(os.getenv('PORT', 8080))
    MAX_MESSAGE_LENGTH: int = 4000
    RATE_LIMIT_MESSAGES: int = 5

# Text messages
class Messages:
    WELCOME = """–ü—Ä–∏–≤—ñ—Ç, {}! üëã
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º—É–∑–∏—á–Ω–æ—ó —Å—Ç—É–¥—ñ—ó Kuznya Music!
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"""
    
    RECORDING_PROMPT = """üé§ *–ó–∞–ø–∏—Å —Ç—Ä–µ–∫—É*

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è:
‚Ä¢ –ó–∞–ø–∏—Å, –ó–≤–µ–¥–µ–Ω–Ω—è
‚Ä¢ –ê—Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è 
‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å–∏ (–ø—Ä–∏–∫–ª–∞–¥–∏)
‚Ä¢ –¢–µ—Ä–º—ñ–Ω–∏ (–∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å)

_–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É_"""
    
    EXAMPLES_INFO = """üéµ *–ù–∞—à—ñ —Ä–æ–±–æ—Ç–∏:*
{}
–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â—ñ –∑—Ä–∞–∑–∫–∏ –Ω–∞—à–æ—ó —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ!"""
    
    CHANNEL_INFO = """üì¢ *–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:*
{}
–¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ù–æ–≤—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–∫—É–ª—ñ—Å—Å—è —Å—Ç—É–¥—ñ—ó
‚Ä¢ –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏"""
    
    CONTACTS_INFO = """üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Å—Ç—É–¥—ñ—ó:*
Telegram: @kuznya_music
–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üé§ –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–∫' –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    
    MESSAGE_SENT = """‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!
–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...
_–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥_"""
    
    DIALOG_ENDED = "‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    ADMIN_REPLY = "üí¨ *–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{}"
    USE_MENU_BUTTONS = "ü§î –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
    
    # Error messages
    ERROR_SEND_FAILED = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    ERROR_MESSAGE_TOO_LONG = f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º {BotConfig.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
    ERROR_RATE_LIMITED = "‚ùå –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É."
    ERROR_INVALID_INPUT = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

# User states
class UserStates:
    IDLE = 'idle'
    WAITING_FOR_MESSAGE = 'waiting_for_message'
    ADMIN_REPLYING = 'admin_replying'

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Initialize bot
config = BotConfig()
bot = telebot.TeleBot(config.TOKEN)

# Database setup
def init_database():
    with sqlite3.connect(config.DATABASE_PATH) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS user_states (
                user_id INTEGER PRIMARY KEY,
                state TEXT DEFAULT 'idle',
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        conn.execute('''CREATE TABLE IF NOT EXISTS user_sessions (
                user_id INTEGER PRIMARY KEY,
                admin_message_id INTEGER,
                user_message_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        conn.execute('''CREATE TABLE IF NOT EXISTS rate_limits (
                user_id INTEGER PRIMARY KEY,
                message_count INTEGER DEFAULT 0,
                last_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        conn.commit()

@contextmanager
def get_db_connection():
    conn = sqlite3.connect(config.DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

# DatabaseManager, validate_message, sanitize_input, keyboards, helper functions, handlers
# –∫–æ–ø—ñ—é—î–º–æ —ó—Ö –±–µ–∑ –∑–º—ñ–Ω –∑ —Ç–≤–æ–≥–æ –∫–æ–¥—É

# Flask app
app = Flask('')

bot_start_time = time.time()

@app.route('/')
def health_check():
    uptime_seconds = int(time.time() - bot_start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    return f"<h1>üéµ Kuznya Music Studio Bot</h1><p>‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</p><p>Uptime: {uptime_hours}–≥–æ–¥ {uptime_minutes}—Ö–≤</p>"

# Webhook endpoint
@app.route(f'/{config.TOKEN}', methods=['POST'])
def receive_update():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.route('/keepalive')
def keep_alive():
    return jsonify({"message": "Bot is alive!", "uptime": int(time.time() - bot_start_time)})

def run_flask():
    app.run(host='0.0.0.0', port=config.WEBHOOK_PORT, debug=False, threaded=True)

# Main execution
if __name__ == "__main__":
    init_database()
    logger.info("Database initialized successfully")

    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info(f"Flask server started on port {config.WEBHOOK_PORT}")

    WEBHOOK_URL = f"https://services.freevps.xyz/{config.TOKEN}"
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")

    logger.info("üéµ Music Studio Bot started successfully! –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π")
