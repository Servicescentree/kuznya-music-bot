import telebot
from telebot import types
import redis
import html
import os

# --- CONFIGURATION ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
UPSTASH_REDIS_REST_URL = os.getenv("UPSTASH_REDIS_REST_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
USER_STATES_PREFIX = "user_state:"
ADMIN_REPLY_TARGET_PREFIX = "admin_reply_target:"
REDIS_URL = UPSTASH_REDIS_REST_URL or "redis://localhost:6379"

# --- DATA LAYER ---
r = redis.Redis.from_url(REDIS_URL, decode_responses=True)

class UserStates:
    IDLE = "idle"
    REPLY_TO_USER = "reply_to_user"

# --- BOT INIT ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- UTILS ---
def is_admin(user_id):
    return user_id == ADMIN_ID

def get_user_state(user_id):
    return r.get(USER_STATES_PREFIX + str(user_id)) or UserStates.IDLE

def set_user_state(user_id, state):
    r.set(USER_STATES_PREFIX + str(user_id), state)

def get_admin_reply_target(admin_id):
    return r.get(ADMIN_REPLY_TARGET_PREFIX + str(admin_id))

def set_admin_reply_target(admin_id, user_id):
    r.set(ADMIN_REPLY_TARGET_PREFIX + str(admin_id), user_id)

def clear_admin_reply_target(admin_id):
    r.delete(ADMIN_REPLY_TARGET_PREFIX + str(admin_id))

def safe_send(user_id, text, **kwargs):
    try:
        bot.send_message(user_id, text, **kwargs)
    except Exception as e:
        print(f"Failed to send message to {user_id}: {e}")

def get_user_info(user):
    info = ""
    if user.first_name:
        info += user.first_name
    if user.last_name:
        info += " " + user.last_name
    if user.username:
        info += f" @{user.username}"
    if not info.strip():
        info = f"ID <code>{user.id}</code>"
    return info.strip()

# --- KEYBOARDS ---
def get_admin_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
    return markup

# --- HANDLERS ---

# START: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å—Ç–∞—Ä—Ç –¥—ñ–∞–ª–æ–≥—É
@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda m: True)
def handle_user_message(message):
    user_id = message.from_user.id
    text = message.text
    info = get_user_info(message.from_user)
    r.set(f"user:{user_id}:info", info)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if not is_admin(user_id):
        admin_markup = types.InlineKeyboardMarkup()
        admin_markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"user_reply_{user_id}"))
        safe_send(
            ADMIN_ID,
            f"üë§ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥:\n{html.escape(info)}\n\n{html.escape(text)}",
            parse_mode='HTML',
            reply_markup=admin_markup
        )
        safe_send(
            user_id,
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='HTML'
        )

# –ê–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–∫–∞—î "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏" –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("user_reply_"))
def admin_start_reply(call):
    admin_id = call.from_user.id
    if not is_admin(admin_id):
        return
    user_id = int(call.data.split("_")[-1])
    set_admin_reply_target(admin_id, user_id)
    set_user_state(admin_id, UserStates.REPLY_TO_USER)
    info = r.get(f"user:{user_id}:info") or f"ID <code>{user_id}</code>"
    safe_send(
        admin_id,
        f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è:\n{html.escape(info)}",
        parse_mode="HTML",
        reply_markup=get_admin_reply_keyboard()
    )

# –ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and get_user_state(m.from_user.id) == UserStates.REPLY_TO_USER)
def admin_reply_to_user(message):
    if message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å":
        set_user_state(message.from_user.id, UserStates.IDLE)
        clear_admin_reply_target(message.from_user.id)
        safe_send(
            message.from_user.id,
            "‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
            parse_mode="HTML"
        )
        return
    admin_id = message.from_user.id
    user_id = get_admin_reply_target(admin_id)
    info = r.get(f"user:{user_id}:info") or f"ID <code>{user_id}</code>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"user_reply_{admin_id}"))
    reply_text = (
        f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
        f"<b>–ö–æ–º—É:</b> {html.escape(info)}\n"
        f"{html.escape(message.text or '')}"
    )
    safe_send(
        user_id,
        reply_text,
        parse_mode='HTML',
        reply_markup=markup
    )
    # --- –û–ù–û–í–õ–ï–ù–ï –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –î–õ–Ø –ê–î–ú–Ü–ù–ê ---
    safe_send(
        admin_id,
        f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n<b>–ö–æ–º—É:</b> {html.escape(info)}",
        parse_mode="HTML",
        reply_markup=get_admin_reply_keyboard()
    )
    set_user_state(admin_id, UserStates.IDLE)
    clear_admin_reply_target(admin_id)

# --- ADMIN MENU USERS ---
@bot.message_handler(commands=['users'])
def admin_users_list(message):
    if not is_admin(message.from_user.id):
        return
    keys = r.keys("user:*:info")
    users = []
    for key in keys:
        user_id = key.split(":")[1]
        info = r.get(key) or f"ID <code>{user_id}</code>"
        users.append(f"{info} (<code>{user_id}</code>)")
    msg = "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n" + "\n".join(users) if users else "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    safe_send(
        message.from_user.id,
        msg,
        parse_mode="HTML"
    )

# --- BROADCAST: —Ä–æ–∑—Å–∏–ª–∫–∞ –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é ---
@bot.message_handler(commands=['broadcast'])
def admin_broadcast_start(message):
    if not is_admin(message.from_user.id):
        return
    safe_send(
        message.from_user.id,
        "‚úâÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        parse_mode="HTML"
    )
    set_user_state(message.from_user.id, "broadcast")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and get_user_state(m.from_user.id) == "broadcast")
def admin_broadcast_send(message):
    admin_id = message.from_user.id
    text = message.text
    keys = r.keys("user:*:info")
    delivered, errors = 0, 0
    for key in keys:
        user_id = int(key.split(":")[1])
        try:
            safe_send(user_id, f"üì¢ <b>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è:</b>\n\n{text}", parse_mode="HTML")
            delivered += 1
        except Exception:
            errors += 1
    stats = (
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{delivered}</b>\n"
        f"–ü–æ–º–∏–ª–∫–∏: <b>{errors}</b>\n"
        f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{len(keys)}</b>"
    )
    safe_send(admin_id, stats, parse_mode="HTML")
    set_user_state(admin_id, UserStates.IDLE)

# --- MAIN LOOP ---
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Bot stopped: {e}")
